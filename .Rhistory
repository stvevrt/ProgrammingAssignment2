m
data<-a$get()
data
m<-mean(data)
m
a$setmean(m)
m
a
b
c
d
data
e
f
g
h
m
b
c
a
b
c
d
h<-a$set(d)
m
h
m
myfunct<-function(){
a<-c(1,2,5,6)
b<-c(9,9,8)
c<-c(11,13,15)
m<-NULL
d<-makeVector(a)
# d is a list containing functions:
# set <- function (y){
#x<<-y         #assigns global value of x to y
#m<<-NULL}     #assigns global value of m to NULL
# get<-function() x
# setmean<-function(mean) m<<-mean  #assigns global value of me to mean
print(d$get())
}
myfunct()
myfunct<-function(){
a<-c(1,2,5,6)
b<-c(9,9,8)
c<-c(11,13,15)
m<-NULL
d<-makeVector(b)
# d is a list containing functions:
# set <- function (y){
#x<<-y         #assigns global value of x to y
#m<<-NULL}     #assigns global value of m to NULL
# get<-function() x
# setmean<-function(mean) m<<-mean  #assigns global value of me to mean
print(d$get())
}
myfunct()
source("a2")
getwd()
source(as)
source(a2)
source?
?source
source("a2",local=TRUE)
dir()
source("a2.R")
myfunct()
a
i<-a$set(a)
m
source("a2.R")
myfunct()
source("a2.R")
myfunct()
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
m
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
?print
myfunct()
source("a2.R")
myfunct()
source("a2.R")
myfunct()
debug(myfunct)
debug(makeVector)
debug(cachemean)
myfunct()
set
get
d
m
data
m
myfunct
myfunct()
d
x
d
m
data
m
x
x$get()
m
print(d$getmean())
m
d$get()
d$getmean()
m
m
data
m
m
m
m
d$getmean()
m
m
source("a2.R")
myfunct()
source("a2.R")
myfunct()
rm(list=ls())
a<-matrix(2,3,5,7,8,9,nrow=2,ncol=3)
a<-matrix(2,3,5,7,8,9,nrow=3,ncol=2)
?matrix
matrix(2,3,2,3,nrow=2)
a<-c(2,3,5,7,8,9)
matrix(a,nrow=2,ncol=3,dimnames=NULL)
matrix(a,nrow=2,ncol=3)
a<-matrix(c(2,4,6,8),2,2)
a
b<-SOLVE(a)
b<-solve(a)
b
a<-matrix(c(1,3,3,1,4,3,1,3,4),3,3)
a
a<-matrix(c(1,3,3,1,4,3,1,3,4),3,3,byrow=TRUE)
a
b<-solve(a)
b
I<-matrix(nrow=0,ncol=0)
I
length(I)
length(b)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
I<-matrix(ncol=0,nrow=0)      ## I is matrix of length zero
set<-function(y){             ## this function sets variables x and I within
x<<-y                    ## makeCacheMatrix function
I<-matrix(ncol=0,nrow=0)
}
get<-function() x
setInverse<-function(inv) I<<-inv  #sets I to inv within makeCacheMatrix
getInverse<-function() I
matrix(c(set,get,setInverse,getInverse),nrow=1,ncol=4,byrow=TRUE,
dimnames=c("set","get","setInverse","getInverse"))
}
a<-matrix(c(2,3,3,5),ncol=2)
a
makeCacheMatrix(a)
?list
source("cacheMatrix.R")
makeCacheMatrix(a)
b<-matrix(c(1,1,1,2),dimnames=list("a","b","c","d"))
b<-matrix(c(1,1,1,2),dimnames=list("a","b")
)
?matrix
source("cacheMatrix.R")
makeCacheMatrix(a)
source("cacheMatrix.R")
makeCacheMatrix(a)
source("cacheMatrix.R")
makeCacheMatrix(a)
source("cacheMatrix.R")
makeCacheMatrix(a)
source("cacheMatrix.R")
makeCacheMatrix(a)
source("cacheMatrix.R")
makeCacheMatrix(a)
get()
get
set
matrix(set=set)
set<-a
get<-b
d<-makeCacheMatrix(a)
a
d
d.set()
d[1,set]
d[1,"set"]
source("cacheMatrix.R")
d<-makeCacheMatrix(a)
a
d$set()
d$get()
getInverse()
d$getInverse()
length(a)
d$1
a$1
a[,1]
help ("matrix")
e<-as.matrix(d)
e
dimnames(e)<-list(c("set","get","setInverse","getInverse",))
dimnames(e)<-list(c("set","get","setInverse","getInverse"),)
dimnames(e)<-list(c("set","get","setInverse","getInverse"),NULL)
e
e
d
is.matrix(e)
is.matrix(d)
summary(d)
type(d)
is.list(d)
help ("data types")
help("list")
formals(d)
vars(d)
d
d$get()
b
b<-matrix(c(3,5,5,3),ncol=2)
b
d$set(b)
d$get()
d$getInverse()
d$setInverse(solve(d$get()))
d$getInverse()
length(b)
{}
source("cacheMatrix.R")
source("cacheMatrix.R")
source("cacheMatrix.R")
b
cacheSolve(b)
a
b
c
cacheSolve(e)
d
g<-cacheSolve(d)
g<-cacheSolve(d)
g
a
b
makeCacheMatrix(a)
j<-makeCacheMatrix(a)
cacheSolve(j)
a
debug("cacheSolve")
cacheSolve(j)
x
I
length(I)
I
data
debug("cacheSolve")
source("cacheMatrix.R")
j<-makeCacheMatrix(a)
debug("cacheSolve")
cacheSolve(j)
I
a
b
d$set(a)
d$get()
a
cacheSolve(d)
I
b
d$set(b)
cacheSolve(d)
I
debug(makeCacheMatrix)
a
b
c
d
makeCacheMatrix(a)
I
x
y
I
d$get()
d$getInverse()
d$set(a)
I
d$getInverse()
I<-matrix(ncol=0,nrow=0)
I
source("cacheMatrix.R")
d$get()
d
a
b
c
c<-makeCacheMatrix(a)
I
c$set()
c$get()
c$getInverse()
d<-cacheSolve(c)
d
c$set(b)
d<-cacheSolve(c)
I
d
d<-cacheSolve(c)
d
c$set(a)
getInverse(c)
c$getInverse()
cacheSolve(c)
cacheSolve(c)
f<-cacheSolve(c)
f
e
c
j
j$set(f)
j$get()
cachesolve(j)
cacheSolve(j)
j
j$get()
j$setInverse()
j$set(g)
I
cacheSolve(j)
g
j
c
j<-makeCacheMatrix()
j
j$set(a)
getInverse()
j$getInverse()
cacheSolve(j)
cacheSolve(j)
j$set(b)
j$getInverse()
cacheSolve(j)
j$set(b)
cacheSolve(j)
j$set(c)
cacheSolve(j)
a
b
c
d
j$set(d)
cacheSolve(d)
e
f
j$set(f)
cacheSolve(f)
h
h<-matrix(c(8,8,9,10,11,12),3,3)
h
j$set(h)
cacheSolve(h)
h
h
j
h
cacheSolve(j)
h
makeCacheMatrix(h)
e<-makeCacheMatrix(h)
e
e
cacheSolve(e)
cacheSolve(e)
e<-makeCacheMatrix(h)
e$get)_
e$get()
e$getInverse()
cacheSolve(e)
m<-solve(h)
h
h<-matrix(c(8,10,12,14,16,18,20,22,24),3,3)
h
h
e
e$set(h)
e$get()
e$getInverse()
cacheSolve(e)
solve(h)
h<-matrix(c(1,1,2,4,4,4,4,2,3,3,2,5,1,1,1,8),4,4)
h
e$set(h)
cacheSolve(e)
solve(h)
solve(a)
solve(b)
solve(c)
set
solve(set)
a<-matrix(c(18,35,76,21),2,2)
a
e$set(a)
cacheSolve(a)
cacheSolve(e)
cacheSolve(e)
n<-cacheSolve(e)
e$set(n)
cacheSolve(e)
a
n
a<-matrix(nrows=0,ncols=0)
?matrix
matrix(data=NA,nrow=0,ncol=0)
a<-matrix(data=NA,nrow=0,ncol=0)
a
length(a)
summary(a)
type(a)
source("cachematrix.R")
a
b
c
c
d
a
a<-makeCacheMatrix(d)
cacheSolve(a)
debug(cacheSolve)
a<-makeCacheMatrix(d)
cacheSolve(a)
I
source("cachematrix.R")
a<-makeCacheMatrix(d)
source("cachematrix.R")
a<-makeCacheMatrix(d)
cacheSolve(a)
I
source("cachematrix.R")
a<-makeCacheMatrix(d)
cacheSolve(a)
debug(makeCacheMatrix)
debug(cacheSolve)
a<-makeCacheMatrix(d)
I
I
I
I
I
cacheSolve(a)
I
I
I
I=NULL
I==NULL
is.null(I)
source("cachematrix.R")
a<-makeCacheMatrix(d)
cacheSolve(a)
d
a
b
c
d
e
f
g
h
a
a$set(h)
a$get()
cacheSolve(a)
b
b<-matrix(2.4,5,9)
b
b<-(matrix(c(2,4,5,9),2))
b
a<-makeCacheMatrix(b)
cacheSolve(a)
